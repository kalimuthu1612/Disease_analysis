import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import warnings

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import (
    mean_squared_error, r2_score,
    classification_report, confusion_matrix, accuracy_score
)
from sklearn.feature_selection import VarianceThreshold
warnings.filterwarnings("ignore")

df = pd.read_csv(r"D:\Python\Disease_Prediction_Dataset.csv")
print("\n--- Head (First 5 Rows) ---")
print(df.head())
print("\n--- Info ---")
print(df.info())
print("\n--- Description ---")
print(df.describe())

X_reg = df.drop(["Glucose", "Disease"], axis=1)
y_reg = df["Glucose"]
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(
    X_reg, y_reg, test_size=0.2, random_state=42
)

scaler_reg = StandardScaler()
X_train_reg_scaled = scaler_reg.fit_transform(X_train_reg)
X_test_reg_scaled = scaler_reg.transform(X_test_reg)

models = {
    "Linear Regression": LinearRegression(),
    "Random Forest Regressor": RandomForestRegressor(n_estimators=100, random_state=42)
}

for name, model in models.items():
    model.fit(X_train_reg_scaled, y_train_reg)
    y_pred = model.predict(X_test_reg_scaled)

    mse = mean_squared_error(y_test_reg, y_pred)
    r2 = r2_score(y_test_reg, y_pred)

    print(f"\n--- {name} ---")
    print("Mean Squared Error (MSE):", round(mse, 2))
    print("RÂ² Score:", round(r2, 4))

    plt.figure(figsize=(6, 4))
    sns.scatterplot(x=y_test_reg, y=y_pred, alpha=0.7)
    plt.plot([y_test_reg.min(), y_test_reg.max()], [y_test_reg.min(), y_test_reg.max()], 'r--')
    plt.xlabel("Actual Glucose")
    plt.ylabel("Predicted Glucose")
    plt.title(f"{name} - Actual vs Predicted")
    plt.tight_layout()
    plt.show()

    if name == "Random Forest Regressor":
        importances = model.feature_importances_
        features = X_reg.columns
        importance_df = pd.DataFrame({"Feature": features, "Importance": importances})
        importance_df = importance_df.sort_values(by="Importance", ascending=False)

        plt.figure(figsize=(10, 6))
        sns.barplot(data=importance_df, x="Importance", y="Feature")
        plt.title("Feature Importance - Random Forest")
        plt.tight_layout()
        plt.show()

plt.figure(figsize=(18, 8))
sns.boxplot(data=df.drop("Disease", axis=1))
plt.xticks(rotation=90)
plt.title("Boxplot of Features")
plt.tight_layout()
plt.show()

df.drop("Disease", axis=1).hist(bins=20, figsize=(15, 9), edgecolor='black')
plt.suptitle("Histograms of All Features")
plt.tight_layout()
plt.show()

corr_matrix = df.drop("Disease", axis=1).corr()
plt.figure(figsize=(20, 16))
sns.heatmap(
    corr_matrix,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    square=True,
    annot_kws={"size": 5}
)
plt.xticks(rotation=43, ha='right', fontsize=6)
plt.yticks(fontsize=6)
plt.title("Correlation Heatmap of Features", fontsize=14)
plt.tight_layout()
plt.show()

if 'ALT' in df.columns and 'AST' in df.columns:
    df['avg_liver_enzymes'] = (df['ALT'] + df['AST']) / 2

if 'C-reactive Protein' in df.columns and 'ESR' in df.columns:
    df['high_inflammation'] = ((df['C-reactive Protein'] > 10) | (df['ESR'] > 20)).astype(int)

if 'Systolic Blood Pressure' in df.columns and 'Diastolic Blood Pressure' in df.columns:
    df['total_bp'] = df['Systolic Blood Pressure'] + df['Diastolic Blood Pressure']

selector = VarianceThreshold(threshold=0.01)
X_class = df.drop("Disease", axis=1)
X_var = selector.fit_transform(X_class)
selected_columns = X_class.columns[selector.get_support()]
X_class = df[selected_columns]
y_class = df["Disease"]

corr_matrix = X_class.corr().abs()
upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))
to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]
X_class = X_class.drop(to_drop, axis=1)

print("\n--- Dropped Highly Correlated Features ---")
print(to_drop)

X_train_cls, X_test_cls, y_train_cls, y_test_cls = train_test_split(
    X_class, y_class, test_size=0.2, random_state=42, stratify=y_class
)

scaler_cls = StandardScaler()
X_train_cls_scaled = scaler_cls.fit_transform(X_train_cls)
X_test_cls_scaled = scaler_cls.transform(X_test_cls)

model_cls = RandomForestClassifier(n_estimators=100, random_state=42)
model_cls.fit(X_train_cls_scaled, y_train_cls)

y_pred_cls = model_cls.predict(X_test_cls_scaled)

print("\n--- Model Evaluation ---")
print("Accuracy:", int(accuracy_score(y_test_cls, y_pred_cls)*100), "%")
print("\nClassification Report:\n", classification_report(y_test_cls, y_pred_cls))
print("\nConfusion Matrix:\n", confusion_matrix(y_test_cls, y_pred_cls))

plt.figure(figsize=(10, 7))
sns.heatmap(confusion_matrix(y_test_cls, y_pred_cls), annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix Heatmap")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

def add_engineered_features(df):
    if 'ALT' in df.columns and 'AST' in df.columns:
        df['avg_liver_enzymes'] = (df['ALT'] + df['AST']) / 2
    if 'Systolic Blood Pressure' in df.columns and 'Diastolic Blood Pressure' in df.columns:
        df['total_bp'] = df['Systolic Blood Pressure'] + df['Diastolic Blood Pressure']
    return df

df = add_engineered_features(df)

label_encoders = {}
le_disease = LabelEncoder()
df['Disease'] = le_disease.fit_transform(df['Disease'])
label_encoders['Disease'] = le_disease

for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le
target_col = 'Disease'
feature_cols = [col for col in df.columns if col != target_col]
X = df[feature_cols]
y = df[target_col]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
    )
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

def predict_disease(user_input):
    input_df = pd.DataFrame([user_input])
    input_df = add_engineered_features(input_df)

    for col in feature_cols:
        if col not in input_df.columns:
            input_df[col] = 0 

    input_df = input_df[feature_cols]  

    pred_encoded = model.predict(input_df)[0]
    predicted_disease = label_encoders['Disease'].inverse_transform([pred_encoded])[0]
    return predicted_disease

user_input = {
    'Glucose': 0.7, 'Cholesterol': 0.7,
    'Hemoglobin': 0.8,'Platelets': 0.7,
    'White Blood Cells': 0.6,'Red Blood Cells': 0.7,
    'Hematocrit': 0.5,'Mean Corpuscular Volume': 0.5,
    'Mean Corpuscular Hemoglobin': 0.95,
    'Mean Corpuscular Hemoglobin Concentration': 0.55,
    'Insulin': 0.5,'BMI': 0.7,
    'Systolic Blood Pressure': 0.6,
    'Diastolic Blood Pressure': 0.8,
    'Triglycerides': 0.45, 'HbA1c': 0.4,
    'LDL Cholesterol': 0.3,'HDL Cholesterol': 0.7,
    'ALT': 0.5, 'AST': 0.4,'Heart Rate': 0.6,
    'Creatinine': 0.45,'Troponin': 0.5,
    'C-reactive Protein': 0.5
}

prediction = predict_disease(user_input)
print("Predicted Disease:", prediction)
